#!/bin/bash
#
# makereport2  vers. 2.4  local (in this folder) command script to help user 
#             transform the outputfile into an html report.
# Usage:   ./makereport2 simOutFileName

# Files used for input: simOutFileName (stdout in simulation)
#             pdprop.env   fadInput.rand (random access data file)
#             loads4rain.out  matfile

#  Copyright (C) 2013  Al Conle
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the license, or (at
# your option) any later version.
#  This  file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTA-
# BILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#  You should have received a copy of the GNU General PUblic License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place -Suite 330, Boston, MA 02111-1307, USA. Try also their
# web site: http://www.gnu.org/copyleft/gpl.html

# vers. 2.4  Slight format changes 2018
# vers. 2.3  add code to read Kt  from pdprop.env  Aug25 2015
# vers. 2.2  add  L=  output.  Aug. 21 2015
# vers. 2.1  adds small plots for begin, end of history
# vers. 2.0  uses the fadInput.rand  file for data input

HTML=tempHTML$$
TMP2=/tmp/temp222.$$
#dadn=temp.dadn

#    Start writing the html page...............................
#echo Content-type: text/html  >$HTML

  echo >$HTML
  echo "<HEAD>" >>$HTML
  echo "<TITLE>Results for $1 : Crack Propagation Plate Wide Flaw</TITLE>" >>$HTML
  echo "</HEAD>">>$HTML
  echo "<BODY>" >>$HTML

  echo "<H2>Results for $1 : Crack Propagation Plate Wide Flaw</H2>" >>$HTML
  echo "<b>Author: A. Conle<br>" >>$HTML
  echo "<i>Affiliation:  Univ. of Waterloo ON Canada</i></b><br>" >>$HTML
  date >>$HTML
#  echo "<p>" >>$HTML


echo "Preparing input data summary for html page ..."
echo "<p>Simulation input data:<br> "             >>$HTML
grep ^\#B\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>B=</b> $item2 mm<br>"             >>$HTML

grep ^\#W\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>W=</b> $item2 mm<br>"             >>$HTML

#grep ^\#ri\= pdprop.env >$TMP2
#read <$TMP2   item1 item2 LEFTOVER
#echo "<b>r<sub>i</sub>=</b> $item2 mm<br>"             >>$HTML

grep ^\#azero\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>a<sub>0</sub>=</b> $item2 mm<br>  "   >>$HTML

#grep ^\#czero\= pdprop.env >$TMP2
#read <$TMP2   item1 item2 LEFTOVER
#echo "<b>c<sub>0</sub>=</b> $item2 mm<br><br>"     >>$HTML

grep ^\#L\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>L=</b> $item2 mm<br><br>"     >>$HTML

grep ^\#MATERIAL\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo " $item1 $item2   (Initiation) <br>"    >>$HTML

grep ^\#Kt\= pdprop.env >$TMP2
read <$TMP2   item1 ktvalue LEFTOVER
echo "<b>Kt=</b> $ktvalue   (Initiation) <br>" >>$HTML


grep ^\#TYPE\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "$item1 $item2<br>"                    >>$HTML

grep ^\#ACTIVATE_MmMb\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo $item1 $item2                          >>$HTML

grep ^\#ACTIVATE_MkmMkb\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo " _____ $item1 $item2"                  >>$HTML

echo "_____ fw=1.0"                          >>$HTML

#Data is in fadInput.rand  random access file.  Each record is for
# each point in the history,  or 4recs  for a repeated pair (begin and end).
#The program plateLongFAD.f divides this list of random access records
#into  1000 intervals, and then steps thru the fadInput.rand  file
# to find the max and min  for each interval.   These max and mins are
# then used for plotting stuff in this script, and also to compute the
# FAD  variables for this simulation.

    ./plateLongFAD   >$1FAD.out
    grep ^\#FADints  $1FAD.out | ../delete1arg  >$1.dat

#Data format in the $1FAD.out file is written using the following:
#        write(6,3810)amaxS(i),nrevS(i),nblk,nact
#     &     ,xlobj90maxS(i),xlobj90minS(i)
#     &     ,stsMmaxS(i),stsMminS(i),stsBmaxS(i),stsBminS(i)
#     &     ,xkr90maxS(i), SrS(i),xLrS(i)
#     &     ,yKrEOL90S(i), SrEOLS(i),xLrEOLS(i)
#     &     ,xMm90,xMb90
#     &     ,xMkm90,xMkb90
#     &     ,xfw


# Right now we want:    nrev  totdam90(=a)   nblk, nact
# from the last record
tail -1 $1.dat | awk '{print $1" "$2" "$2/2}' >$TMP2
read <$TMP2  a  nrev cycles LEFTOVER

grep ^\#MAXRECORDS\=  $1FAD.out   >$TMP2
read <$TMP2 item1  maxrecords LEFTOVER
grep ^\#MAXBLOCKS\=   $1FAD.out   >$TMP2
read <$TMP2 item1 nblk  LEFTOVER
grep ^\#NACT\=   $1FAD.out   >$TMP2
read <$TMP2 item1 nact  LEFTOVER

echo "<p>Crack Propagation Results:<br>(<i> " >>$HTML
grep vers\. $1 | grep plateLongSurfFlaw       >>$HTML
echo "# makereport2  vers. 2.4"               >>$HTML
grep vers\. $1FAD.out | grep plateLongFAD     >>$HTML

echo "</i>)<ul><li>No. of Reversals= $nrev revs. or $cycles cycles" >>$HTML
echo "<li>Final _____ <b>a </b>=      $a   mm"    >>$HTML
echo "<li>No. of History Reps.= $nblk reps. + $nact revs."  >>$HTML
echo "</ul>"                    >>$HTML

#   create the gnuplot load file for crack 
#   Find the first point of the last 1/4 of the file
wc -l  $1.dat
#   It ain't pretty... there are probably 1000 intervals, but, just in case
    wc -l $1.dat | awk '{print int($1/4.0)}' >$TMP2
    read <$TMP2  labelLine LEFTOVER
echo "doing a tail -$labelLine ..."
    tail -$labelLine $1.dat  | head -1 >$TMP2
    cat $TMP2


echo "fetching line no.= $labelLine from the data   for label placement..."
    read <$TMP2 amax nrev nblk nact \
          lobj90max lobj90min \
          stsMmax stsMmin stsBmax stsBmin \
          Kr90max  Sr Lr \
          KrEOL90  SrEOL LrEOL \
          xMm90 xMb90 xMkm90 xMkb90 xfw
#   The above give the co-ordinates at which the labels will be placed on graph



    echo "set term pngcairo size 600,384 font \"Arial,10\"" >loadgp0
    echo "set grid"                           >>loadgp0
    echo "set output \"$1.crk.png\""          >>loadgp0
    echo "set title \"$1 Crack Propagation\" "       >>loadgp0
    echo "set xlabel \"1/2 Cycles or Reversals\"  "  >>loadgp0
    echo "set ylabel \"a ,  Crack Length mm\" "      >>loadgp0
    echo "set label \" a\" at $nrev,$amax"           >>loadgp0
    echo "set key left"                              >>loadgp0
    echo "plot  \"$1.dat\"  u 2:1 t \"a\" w l"       >>loadgp0
#   Now gnuplot can load the instructions
    gnuplot "loadgp0"
#   Make a link to image  in html file:
    echo "<p><img src=\"$1.crk.png\">"  >>$HTML
    echo "<br> " >>$HTML

echo "Fetching filtered history of Sb and Sm ..."
    rm temp.loads
    grep \#history\ \#Filteredck   $1 |../delete1arg | ../delete1arg >temp.loads
    echo "set term pngcairo size 600,300 font \"Arial,10\"" >loadgp1
    echo "set title \"Applied Sm and Sb Stress History (after filtering)\"" >>loadgp1
    echo "set grid"                                       >>loadgp1
    echo "set output \"$1.stress.png\""                   >>loadgp1
    echo "set xlabel \"Point No. or Reversals\"  "        >>loadgp1
    echo "set ylabel \"Sm or Sb, Stress MPa\" "           >>loadgp1
    echo "plot  \"temp.loads\"  u 1 title \"Sm\" w l, \"\" u 2 title \"Sb\" w l lc 3"  >>loadgp1
    gnuplot "loadgp1"
    echo "<p><img src=\"$1.stress.png\">"  >>$HTML
    echo "<br> " >>$HTML

#   Plot BEGIN 50 and END 50 pts  if no. of points  >1000
#   Check file temp.loads  to see how many loadsets there are.
    wc -l temp.loads >$TMP2
    read <$TMP2  nloadsets LEFTOVER
    if [[ $nloadsets -gt 1000 ]];
    then
      echo "#Plotting head and tail of hist..."
      echo "set term pngcairo size 300,250 font \"Arial,8\"" >loadgp1
      echo "set title \"Begin of History\""                 >>loadgp1
      echo "set grid"                                       >>loadgp1
      echo "set output \"$1.stressA.png\""                  >>loadgp1
#      echo "set xlabel \"Point No. or Reversals\"  "        >>loadgp1
      echo "set ylabel \"Sm or Sb, Stress MPa\" "           >>loadgp1
      echo "set xrange [0:50]"                              >>loadgp1
      echo "plot  \"temp.loads\"  u 1 title \"Sm\" w l, \"\" u 2 title \"Sb\" w l lc 3"  >>loadgp1
      gnuplot "loadgp1"

      echo "$nloadsets" | awk '{print $1-50}'    >$TMP2
      read <$TMP2 iendless50 LEFTOVER
      echo "set term pngcairo size 300,250 font \"Arial,8\"" >loadgp1
      echo "set title \"End of History\""                   >>loadgp1
      echo "set grid"                                       >>loadgp1
      echo "set output \"$1.stressB.png\""                  >>loadgp1
#      echo "set xlabel \"Point No. or Reversals\"  "        >>loadgp1
      echo "set ylabel \"Sm or Sb, Stress MPa\" "           >>loadgp1
      echo xrange: $iendless50:$nloadsets
      echo "set xrange [$iendless50:$nloadsets]"            >>loadgp1
      echo "plot  \"temp.loads\"  u 1 title \"Sm\" w l, \"\" u 2 title \"Sb\" w l lc 3"  >>loadgp1
      gnuplot "loadgp1"

      echo "<img src=\"$1.stressA.png\">"  >>$HTML
      echo "<img src=\"$1.stressB.png\">"  >>$HTML
      echo "<br> " >>$HTML
    fi


echo "Plotting da/dn table from text results file ..."
    grep ^\#dadnTable $1 |../delete1arg  >dadntable$$
    echo "set term pngcairo size 480,360 font \"Arial,10\"" >loadgp1b
    echo "set title \"Material Crack Propagation Data\""  >>loadgp1b
    echo "set logscale xy"                                >>loadgp1b
    echo "set grid"                                       >>loadgp1b
    echo "set output \"$1.dadn.png\""                     >>loadgp1b
    echo "set xlabel \"Delta K,  MPa*sqrt(mm)\"  "        >>loadgp1b
    echo "set ylabel \"da/dN,  mm/Cycle\" "               >>loadgp1b
    echo "set format y '%.0tE%+T'"                        >>loadgp1b
    echo "set xrange [10:5000]"                           >>loadgp1b
    echo "plot  \"dadntable$$\"  u 1:2 title \"$1\" w lp" >>loadgp1b
    gnuplot "loadgp1b"
    echo "<p><img src=\"$1.dadn.png\">"  >>$HTML
    echo "<br> " >>$HTML

#   These are maxima values for each of the 1000 intervals
echo "Starting plot of Kmax and Kmin for direction  a ..."
    echo "set term pngcairo size 512,384 font \"Arial,10\"" >loadgp2
    echo "set grid"                                        >>loadgp2
    echo "set title \"History of Kmax, Kmin for Crack in Direction a\"">>loadgp2
    echo "set output \"$1.Kmax+Kmin90.png\""               >>loadgp2
    echo "set xlabel \"1/2 Cycles or Reversals\"  "        >>loadgp2
    echo "set ylabel \"Kmax, or Kmin in each Interval\" " >>loadgp2
    echo "plot  \"$1.dat\"  u 2:5 w p, \"\" u 2:6 w p"     >>loadgp2
#   Now gnuplot can load the instructions in loadgp2
    gnuplot "loadgp2"
    echo "<p><img src=\"$1.Kmax+Kmin90.png\">"  >>$HTML
    echo "<br> " >>$HTML


#               1       2       3       4        5         6
#   read $TMP2 amax    nrev    nblk    nact   lobj90max lobj90min \
#               7       8       9       10       11        12      13
#             stsMmax stsMmin stsBmax stsBmin  Kr90max     Sr      Lr \
#              14      15       16      17       18        19      20   21
#             KrEOL90  SrEOL   LrEOL   xMm90    xMb90    xMkm90  xMkb90 xfw
echo "Starting plot of the Factors Mm, Mb, for crack ..."
    echo "set term pngcairo size 600,600 font \"Arial,10\"" >loadgp4
    echo "set grid"                           >>loadgp4
    echo "set title \"History of Mm and Mb During Crack Prop.\"">>loadgp4
    echo "set output \"$1.factors.png\""                  >>loadgp4
    echo "set xlabel \"1/2 Cycles or Reversals\"  "       >>loadgp4
    echo "set ylabel \"Mm and Mb  for each Reversal\" "   >>loadgp4
    echo "set label \"  Mm\" at $nrev,$xMm90"             >>loadgp4
    echo "set label \"  Mb\" at $nrev,$xMb90"             >>loadgp4
    echo "set label \"   Mkm\" at $nrev,$xMkm90"          >>loadgp4
    echo "set label \"   Mkb\" at $nrev,$xMkb90"          >>loadgp4
    echo "plot  \"$1.dat\"  u 2:17 title \"Mm\" w l, \"\" u 2:18 title \"Mb\" w l, \"\" u 2:19 title \"Mkm\" w l, \"\" u 2:20 t \"Mkb\" w l"  >>loadgp4
    gnuplot "loadgp4"
    echo "<p><img src=\"$1.factors.png\">"  >>$HTML
    echo "<br> " >>$HTML

echo 
echo "Converting the random access file  to FAD interval file..."

grep -i ^\#TensileFile\= pdprop.env              >$TMP2
read <$TMP2   item1 item2 LEFTOVER
if [ $item2 != "none" ]; then
    echo "<!-- PAGE BREAK -->"                                 >>$HTML
    echo "<h2>FAD Results for $1<br>"                          >>$HTML
    grep -i ^\#TensileFile\=  pdprop.env  >$TMP2
    read <$TMP2   item1 item2 LEFTOVER
    echo "$item1  $item2 </h2>"                                >>$HTML

    grep -i ^\#PmEOL\= pdprop.env >$TMP2
    read <$TMP2   item1 item2 LEFTOVER
    echo "$item1  $item2"                                      >>$HTML

    grep -i ^\#PbEOL\= pdprop.env >$TMP2
    read <$TMP2   item1 item2 LEFTOVER
    echo "$item1  $item2  <br>"                                >>$HTML

    grep -i ^\#Kmat\= pdprop.env >$TMP2
    read <$TMP2   item1 item2 LEFTOVER
    echo "$item1  $item2 <br>"                                 >>$HTML

    grep -i ^\#PinJoint\= pdprop.env >$TMP2
    read <$TMP2   item1 item2 LEFTOVER
    echo "$item1  $item2 <br><p>"                              >>$HTML

# done near begin of this script:     ./plateWeldFAD   >$1FAD.out
    grep  ^\#FADints $1FAD.out | ../delete1arg > fadints.out
    grep \#FAD1  $1FAD.out | ../delete1arg > fad1_xy
    grep \#FAD2a $1FAD.out | ../delete1arg > fad2a_xy
    grep \#FAD2b $1FAD.out | ../delete1arg > fad2b_xy
#    plot data is ready
  echo "Starting plot of the FAD items ..."
    echo "set term pngcairo size 600,500 font \"Arial,10\""  >loadgp4
    echo "set grid"                                          >>loadgp4
    echo "set title \"$1 FAD Analysis\""                     >>loadgp4
    echo "set pointsize 2"                                   >>loadgp4
    echo "set xlabel \"Sr  or  Lr\""                         >>loadgp4
    echo "set ylabel \"Kr\""                                 >>loadgp4
    echo "set xrange [0:1.8]"                                >>loadgp4
    echo "set yrange [0:1.2]"                                >>loadgp4
    echo "set output \"$1.FAD.png\""                         >>loadgp4
#    echo "set label \"     c_Mb\" at $item1,$xMb00"          >>loadgp4
#         Note: use no space after \\
    echo "plot  \"fadints.out\" \\"                          >>loadgp4
    echo " u 12:11 w lp  t \"Kr_9_0 , Sr\",\\"               >>loadgp4
    echo " \"\" u 13:11 t \"Kr_9_0 , Lr\" w lp,\\"           >>loadgp4

    echo " \"\" u 12:14 t \"EOL Kr_9_0 , Sr\" w lp,\\"       >>loadgp4
    echo " \"\" u 13:14 t \"EOL Kr_9_0 , Lr\" w lp,\\"       >>loadgp4

    echo " \"fad1_xy\"  u 1:2   t \"fad1  \" w lp,\\"        >>loadgp4
    echo " \"fad2a_xy\" u 1:2   t \"fad2a \" w lp,\\"        >>loadgp4
    echo " \"fad2b_xy\" u 1:2   t \"fad2b \" w lp\\"         >>loadgp4

    gnuplot "loadgp4"
    echo "<p><img src=\"$1.FAD.png\">"                    >>$HTML
    echo "<br> "                                          >>$HTML
  else
    echo "No Tensile data specified in pdprop.env "       >>$HTML
    echo "Thus no FAD analysis."                          >>$HTML
  fi



echo
echo "Checking if Crack initiation life can be calculated..."
    grep ^\#MATERIAL\= pdprop.env | tail -1   > $TMP2
    read <$TMP2 item1  fileMat LEFTOVER
    echo "found:   " $item1  $fileMat ;
    if [ $fileMat != "none" ]; then
#      Yes, material was defined. We can use it to run initiation sim.
#      The stress history file should have been written out by the crack prop. sim.
#      Time to get fancy again. We need to specify the maxima for the rainflow count.
#      Theoretically it is possible to have a Smax that is negative thus:
       ../hilo2 <loads4rain.out |  grep -v \#  >$1.rain.hilo
#       cat $1.rain.hilo
#      pdrain will hunt for max and min before it begins counting...
       echo "     ../pdrain 2 <loads4rain.out  >$1.rain.txt"
#     Data is in the 2nd column, thus:
       ../pdrain 2  <loads4rain.out  >$1.rain.txt 
     else
       echo "No Stress-Strain-Life Materials file specified."  >>$HTML
       echo "Thus no crack initiation simulation possible."  >>$HTML
       mv $HTML  $1.html
       echo "Deleting temporary files:  loadgp0,1,1b,2,3,4"
       rm loadgp0 loadgp1 loadgp1b loadgp2 loadgp4
       echo "Done. html file is: $1.html   Making pdf ..."
       echo "htmldoc --webpage --footer ..1 -f $1.pdf $1.html"
       htmldoc --webpage --footer ..1 -f $1.pdf $1.html
       echo "Done. In Linux you can view pdf with command: "
       echo "          evince $1.pdf"
       exit
     fi

#      Ok, we have a potential material file in matfile
       echo "<!-- PAGE BREAK -->"                                    >>$HTML
       echo "<h2>Crack Initiation Life Results for $1<br>"           >>$HTML
       echo " (Using Kt= $ktvalue )  </h2>"        >>$HTML
       cp loads4rain.out $1.loads4rain.txt
       cp matfile $1.matfile.txt
       echo "Files Used:"                                   >>$HTML
       echo "<ul><li><a href=\"$1.loads4rain.txt\">Stress History (Sb+Sm)</a>" >>$HTML
       echo "<li><a href=\"$1.rain.txt\">Rainflow File</a>"         >>$HTML
       echo "<li><a href=\"$1.matfile.txt\">Material File</a>"      >>$HTML
       echo "</ul>" >>$HTML
echo "Starting Initiation calculations..."
       echo "../saefcalc2  matfile $ktvalue <$1.rain.txt >$1.initResults"
       ../saefcalc2  matfile $ktvalue <$1.rain.txt >$1.initResults

       echo "Predicted History Repetitions to Initiation:" >>$HTML
       echo "<pre><b>"                                     >>$HTML
       grep \#xcalc3 <$1.initResults  | ../delete1arg      >>$HTML
       echo "</b></pre>"                                   >>$HTML

#      fetch the hysteresis loops for plotting

       echo "<h3>Local Stress and Strain Response:</h3>" >>$HTML
       grep -i \#plotloops $1.initResults | ../delete1arg >temp5
#      create the gnuplot load file
       echo "set term pngcairo font \"Arial,10\"" >loadgp5
       echo "set grid"                        >>loadgp5
       echo "set output \"$1ss.png\" "        >>loadgp5
       echo "set xlabel \"Strain\"  "         >>loadgp5
       echo "set ylabel \"Stress, MPa\" "     >>loadgp5
       echo "plot  \"temp5\"  w lp"           >>loadgp5
       gnuplot "loadgp5"
       echo "<p><img src=\"$1ss.png\"><br>"  >>$HTML

#Fetch boxed cumulative cycle plot and damage plot data
    echo "<!-- PAGE BREAK -->"                                 >>$HTML
    echo "<h3>Cumulative Cycle Plot of History and Initiation Damage:</h3>" >>$HTML
    grep -i \#plothist $1.initResults | ../delete1arg >temp6
    grep -i \#plotdam  $1.initResults | ../delete1arg >temp7

#   create the gnuplot load file, re-use $TMP3
    echo "set term pngcairo font \"Arial,10\""  >loadgp6
    echo "set output \"$1.damage.png\" "       >> loadgp6
    echo "set logscale x "                     >> loadgp6
    echo "set xlabel \"Cumulative Cycles\" "   >> loadgp6
    echo "set xrange [0.1:*] "                 >> loadgp6
    echo "set ylabel \"Nominal Stress, MPa\" " >> loadgp6

    echo "set y2label \"% Damage\" "         >> loadgp6
    echo "set y2label \"% Damage\" "         >> loadgp6
    echo "set y2range [0.:100.] "            >> loadgp6
    echo "set format y2 \"%f\"  "            >> loadgp6

    echo "plot \"temp6\" title \"History\" w lp, \"temp7\" axes x1y2 title \"SWaT\" w lp, \"temp7\" u 1:3 axes x1y2 title \"Morrow\" w lp" >> loadgp6
    gnuplot "loadgp6"
    echo "<p><img src=\"$1.damage.png\">"  >>$HTML
    echo "<br> " >>$HTML
    echo "<i>(Rectangles are Rainflow Cycle Sets: Sorted by Range: largest on Left)</i>" >>$HTML

    echo "<h3>Detailed Damage for each Rainflow Cycle Set:</h3>" >>$HTML
       echo "<pre>"                  >>$HTML
       grep \#xcalc2 <$1.initResults | ../delete1arg  >>$HTML
       echo "</pre>"              >>$HTML

echo "<h2>Appendix 1:   Print of  \"pdprop.env\" Simulation Control file</h2>"  >>$HTML
    echo "<pre>"                        >>$HTML
    cat pdprop.env                      >>$HTML
    echo "</pre>"                       >>$HTML


echo "<h2>Appendix 2:   Print of  da/dn vs DeltaK Table in file $1 </h2>"          >>$HTML
    echo "<pre>"                        >>$HTML
#   file was created by a grep for dadn plot (above)
    echo "   Delta_K        da/dN"      >>$HTML
    cat dadntable$$                     >>$HTML
    echo "</pre>"                       >>$HTML
    rm dadntable$$


echo "<h2>Appendix 3:   Print of  Stress-Strain-Init.Life file: \"matfile\" </h2>"  >>$HTML
    echo "<pre>"                        >>$HTML
    cat matfile                         >>$HTML
    echo "</pre>"                       >>$HTML


echo "</BODY></HTML>" >>$HTML
    rm $TMP2
    echo "Deleting temporary files:  loadgp0,1,1b,2,3,4,5,6  temp5,6,7"
    rm loadgp0 loadgp1 loadgp1b loadgp2 loadgp4 loadgp5 loadgp6
    rm temp5 temp6 temp7
    mv $HTML  $1.html
    echo "Done. html file is: $1.html   Making pdf ..."
    echo "     htmldoc --webpage --footer ..1 -f $1.pdf $1.html"
    htmldoc --webpage --footer ..1 -f $1.pdf $1.html
    echo "If you have multiple *.html files you could use a command like: "
    echo "     htmldoc --book  -f name.pdf  file1.html  file2.html ...etc"
    echo "Done. In Linux you can view pdf with command: "
    echo "          evince $1.pdf"
    exit

